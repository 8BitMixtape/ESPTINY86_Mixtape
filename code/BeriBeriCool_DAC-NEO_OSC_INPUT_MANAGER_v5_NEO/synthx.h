
#ifndef SYNTHTEST_H
#define SYNTHTEST_H
#include "Synth.h"
#include "Modules.h"
#include "ModuleExternalInput.h"


class SynthTest : public Synth
{
    public:
    ModuleConstant param[8];

    SynthTest(Input_Manager * inputManager)
    {
    
        //Define Node Objects
  ModuleWavetableOsc *moduleWavetableOsc_1 = new ModuleWavetableOsc();
  ModuleLFO *moduleLFO_1 = new ModuleLFO();
  ModuleVCA *moduleVCA_1 = new ModuleVCA();
  ModuleLowpassFilter *moduleLowpassFilter_1 = new ModuleLowpassFilter();
  ModuleExternalInput *pot0 = new ModuleExternalInput(0,inputManager);
  ModuleExternalInput *pot1 = new ModuleExternalInput(1,inputManager);
  ModuleExternalInput *touchosc1 = new ModuleExternalInput("/touchosc1",inputManager);
  ModuleExternalInput *touchLED1 = new ModuleExternalInput("/touchLED1",inputManager);
  ModuleExternalInput *touchosc3 = new ModuleExternalInput("/touchosc3",inputManager);
  ModuleExternalInput *touchosc2 = new ModuleExternalInput("/touchosc2",inputManager);
  ModuleExternalInput *touchosc4 = new ModuleExternalInput("/touchosc4",inputManager);
  ModuleExternalInput *pot3 = new ModuleExternalInput(3,inputManager);
  ModuleExternalInput *pot2 = new ModuleExternalInput(2,inputManager);

  moduleWavetableOsc_1->frequency_input=moduleLFO_1;
  moduleLFO_1->wavetable_input = pot1;
  moduleWavetableOsc_1->wavetable_input = pot0;
  moduleLFO_1->frequency_input = touchosc1;
  moduleVCA_1->cv_input = pot3;
  moduleLowpassFilter_1->audio_input=moduleWavetableOsc_1;
  moduleLowpassFilter_1->cutoff_input = pot2;
  moduleLowpassFilter_1->resonance_input = touchosc2;
  moduleVCA_1->audio_input=moduleLowpassFilter_1;


  this->last_module = moduleVCA_1;
        
    }
};
#endif // SYNTHTEST_H    


/* 

This is espnode86 stuff do not edit

--BEGINESPNODEPATCH--
djIuMS4xCm5ldHdvcmsvYWRkLXBhdGNoIHNhZDQgcm9vdApwYXRjaC9vcGVuIHNhZDQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB4ZjhyIGVzcG5vZGUvbm9kZWxpc3QgTm9kZSUyMFBhbGxldGUKbm9kZS90dXJuLW9uIHhmOHIKcGF0Y2gvYWRkLW5vZGUgc2FkNCA1YmZs
IHdhdmUvb3NjaWxsYXRvciBPc2NpbGxhdG9yCm5vZGUvdHVybi1vbiA1YmZsCm5vZGUvYWRkLWlubGV0IDViZmwgbXJwdCBlc3Bub2RlL3N0cmluZyBmcmVxdWVuY3lfaW5wdXQgZnJlcXVlbmN5X2lucHV0Cm5vZGUvYWRkLWlubGV0IDViZmwgOXN2OSBlc3Bub2Rl
L3N0cmluZyB3YXZldGFibGVfaW5wdXQgd2F2ZXRhYmxlX2lucHV0Cm5vZGUvYWRkLW91dGxldCA1YmZsIG53YmUgZXNwbm9kZS9zdHJpbmcgT3V0IE91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IGRpbWMgb3V0cHV0L2RhYyBBdWRpbyUyMERBQwpub2RlL3R1cm4tb24g
ZGltYwpub2RlL2FkZC1pbmxldCBkaW1jIHl3N3EgZXNwbm9kZS9zdHJpbmcgYXVkaW9faW5wdXQgYXVkaW9faW5wdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB3a3JzIHdhdmUvbGZvIExGJTIwT3NjaWxsYXRvcgpub2RlL3R1cm4tb24gd2tycwpub2RlL2FkZC1pbmxl
dCB3a3JzIGMycGsgZXNwbm9kZS9zdHJpbmcgZnJlcXVlbmN5X2lucHV0IGZyZXF1ZW5jeV9pbnB1dApub2RlL2FkZC1pbmxldCB3a3JzIG44NDMgZXNwbm9kZS9zdHJpbmcgd2F2ZXRhYmxlX2lucHV0IHdhdmV0YWJsZV9pbnB1dApub2RlL2FkZC1vdXRsZXQgd2ty
cyBqbzEwIGVzcG5vZGUvc3RyaW5nIE91dCBPdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCAxZW01IGlucHV0L3BvdGVudGlvbWV0ZXIgUG90ZW50aW8lMjB+JTIwSW5wdXQKbm9kZS90dXJuLW9uIDFlbTUKbm9kZS9hZGQtaW5sZXQgMWVtNSBjYWpmIGVzcG5vZGUvc3Ry
aW5nIHNhbXBsZSBzYW1wbGUKbm9kZS9hZGQtb3V0bGV0IDFlbTUgNTNiMCBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgYXlvZSBpbnB1dC9wb3RlbnRpb21ldGVyIFBvdGVudGlvJTIwfiUyMElucHV0Cm5vZGUvdHVybi1vbiBheW9l
Cm5vZGUvYWRkLWlubGV0IGF5b2Ugb2hhdyBlc3Bub2RlL3N0cmluZyBzYW1wbGUgc2FtcGxlCm5vZGUvYWRkLW91dGxldCBheW9lIDU3czYgZXNwbm9kZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IGhpemEgaW5wdXQvb3NjIE9TQyUyMH4lMjBJ
bnB1dApub2RlL3R1cm4tb24gaGl6YQpub2RlL2FkZC1pbmxldCBoaXphIGs4cTMgZXNwbm9kZS9zdHJpbmcgc2FtcGxlIHNhbXBsZQpub2RlL2FkZC1vdXRsZXQgaGl6YSBrNnZxIGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB2bGFx
IGlucHV0L29zYyBPU0MlMjB+JTIwSW5wdXQKbm9kZS90dXJuLW9uIHZsYXEKbm9kZS9hZGQtaW5sZXQgdmxhcSA5aDZnIGVzcG5vZGUvc3RyaW5nIHNhbXBsZSBzYW1wbGUKbm9kZS9hZGQtb3V0bGV0IHZsYXEgc3JvYiBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBh
dGNoL2FkZC1ub2RlIHNhZDQgc29xNyBpbnB1dC9vc2MgT1NDJTIwfiUyMElucHV0Cm5vZGUvdHVybi1vbiBzb3E3Cm5vZGUvYWRkLWlubGV0IHNvcTcgOXdwaSBlc3Bub2RlL3N0cmluZyBzYW1wbGUgc2FtcGxlCm5vZGUvYWRkLW91dGxldCBzb3E3IDN5YW8gZXNw
bm9kZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IDY3ODQgaW5wdXQvb3NjIE9TQyUyMH4lMjBJbnB1dApub2RlL3R1cm4tb24gNjc4NApub2RlL2FkZC1pbmxldCA2Nzg0IGhydTUgZXNwbm9kZS9zdHJpbmcgc2FtcGxlIHNhbXBsZQpub2RlL2Fk
ZC1vdXRsZXQgNjc4NCA0amxmIGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCA4dzFyIGlucHV0L29zYyBPU0MlMjB+JTIwSW5wdXQKbm9kZS90dXJuLW9uIDh3MXIKbm9kZS9hZGQtaW5sZXQgOHcxciAxb2RvIGVzcG5vZGUvc3RyaW5n
IHNhbXBsZSBzYW1wbGUKbm9kZS9hZGQtb3V0bGV0IDh3MXIgdG5nMiBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgc2R5cCBzaWduYWwvdmNhIFZDQSUyMChWb2x0YWdlJTIwQ3RybCUyMEFtcGxpZmllcikKbm9kZS90dXJuLW9uIHNk
eXAKbm9kZS9hZGQtaW5sZXQgc2R5cCBsMGpwIGVzcG5vZGUvc3RyaW5nIGF1ZGlvX2lucHV0IGF1ZGlvX2lucHV0Cm5vZGUvYWRkLWlubGV0IHNkeXAgb20wbSBlc3Bub2RlL3N0cmluZyBjdl9pbnB1dCBjdl9pbnB1dApub2RlL2FkZC1vdXRsZXQgc2R5cCB5azZ1
IGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBnd3djIGlucHV0L3BvdGVudGlvbWV0ZXIgUG90ZW50aW8lMjB+JTIwSW5wdXQKbm9kZS90dXJuLW9uIGd3d2MKbm9kZS9hZGQtaW5sZXQgZ3d3YyBvNGxqIGVzcG5vZGUvc3RyaW5nIHNh
bXBsZSBzYW1wbGUKbm9kZS9hZGQtb3V0bGV0IGd3d2MgdmJhbCBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgY2doZSBmaWx0ZXIvbG93cGFzcyBMb3clMjBQYXNzJTIwRmlsdGVyCm5vZGUvdHVybi1vbiBjZ2hlCm5vZGUvYWRkLWlu
bGV0IGNnaGUgeW02YSBlc3Bub2RlL3N0cmluZyBhdWRpb19pbnB1dCBhdWRpb19pbnB1dApub2RlL2FkZC1pbmxldCBjZ2hlIHhvMWMgZXNwbm9kZS9zdHJpbmcgY3V0b2ZmX2lucHV0IGN1dG9mZl9pbnB1dApub2RlL2FkZC1pbmxldCBjZ2hlIGhrdDUgZXNwbm9k
ZS9zdHJpbmcgcmVzb25hbmNlX2lucHV0IHJlc29uYW5jZV9pbnB1dApub2RlL2FkZC1vdXRsZXQgY2doZSBxaTd0IGVzcG5vZGUvc3RyaW5nIE91dCBPdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBtM3FqIGlucHV0L3BvdGVudGlvbWV0ZXIgUG90ZW50aW8lMjB+JTIw
SW5wdXQKbm9kZS90dXJuLW9uIG0zcWoKbm9kZS9hZGQtaW5sZXQgbTNxaiBnZjE2IGVzcG5vZGUvc3RyaW5nIHNhbXBsZSBzYW1wbGUKbm9kZS9hZGQtb3V0bGV0IG0zcWogZndrNSBlc3Bub2RlL3N0cmluZyBvdXQgb3V0Cm5vZGUvbW92ZSB4ZjhyIDMwIDIwCm5v
ZGUvbW92ZSA1YmZsIDk2NCA3MQpub2RlL21vdmUgZGltYyAxNTYxIDU3Cm5vZGUvbW92ZSB3a3JzIDY3NiA3Ngpub2RlL21vdmUgMWVtNSA3NDMgMjEyCm5vZGUvbW92ZSBheW9lIDQwMCAyMTIKbm9kZS9tb3ZlIGhpemEgMzY0IDMwCm5vZGUvbW92ZSB2bGFxIDQy
NyAzNjUKbm9kZS9tb3ZlIHNvcTcgNzc1IDQ3Mgpub2RlL21vdmUgNjc4NCA0MjIgNTI0Cm5vZGUvbW92ZSA4dzFyIDc3NCAzNDkKbm9kZS9tb3ZlIHNkeXAgMTM5NSA1MQpub2RlL21vdmUgZ3d3YyAxMjI3IDI5NApub2RlL21vdmUgY2doZSAxMTg5IDY0Cm5vZGUv
bW92ZSBtM3FqIDk2OCAxOTYKb3V0bGV0L2Nvbm5lY3Qgam8xMCBtcnB0IDJvODkKb3V0bGV0L2Nvbm5lY3QgNTdzNiBuODQzIG95a28Kb3V0bGV0L2Nvbm5lY3QgNTNiMCA5c3Y5IGNtczYKb3V0bGV0L2Nvbm5lY3QgazZ2cSBjMnBrIGd3Z2UKb3V0bGV0L2Nvbm5l
Y3QgeWs2dSB5dzdxIGZlaW4Kb3V0bGV0L2Nvbm5lY3QgdmJhbCBvbTBtIHR0bTcKb3V0bGV0L2Nvbm5lY3QgbndiZSB5bTZhIHg2cmcKb3V0bGV0L2Nvbm5lY3QgZndrNSB4bzFjIG13bGsKb3V0bGV0L2Nvbm5lY3QgNGpsZiBoa3Q1IGl3bGcKb3V0bGV0L2Nvbm5l
Y3QgcWk3dCBsMGpwIGtrd2kKbm9kZS91cGRhdGUtaW5sZXQgNWJmbCBtcnB0IGZyZXF1ZW5jeV9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDViZmwgOXN2OSB3YXZldGFibGVfaW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCB3a3JzIGMycGsgZnJlcXVlbmN5X2lu
cHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgd2tycyBuODQzIHdhdmV0YWJsZV9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDFlbTUgY2FqZiBzYW1wbGUgMApub2RlL3VwZGF0ZS1pbmxldCBheW9lIG9oYXcgc2FtcGxlIDEKbm9kZS91cGRhdGUtaW5sZXQgaGl6YSBr
OHEzIHNhbXBsZSB0b3VjaG9zYzEKbm9kZS91cGRhdGUtaW5sZXQgdmxhcSA5aDZnIHNhbXBsZSB0b3VjaExFRDEKbm9kZS91cGRhdGUtaW5sZXQgc29xNyA5d3BpIHNhbXBsZSB0b3VjaG9zYzMKbm9kZS91cGRhdGUtaW5sZXQgNjc4NCBocnU1IHNhbXBsZSB0b3Vj
aG9zYzIKbm9kZS91cGRhdGUtaW5sZXQgOHcxciAxb2RvIHNhbXBsZSB0b3VjaG9zYzQKbm9kZS91cGRhdGUtaW5sZXQgc2R5cCBvbTBtIGN2X2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgZ3d3YyBvNGxqIHNhbXBsZSAzCm5vZGUvdXBkYXRlLWlubGV0IGNnaGUg
eW02YSBhdWRpb19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGNnaGUgeG8xYyBjdXRvZmZfaW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBjZ2hlIGhrdDUgcmVzb25hbmNlX2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgbTNxaiBnZjE2IHNhbXBsZSAy
--ENDESPNODEPATCH--

*/


#ifndef SYNTHTEST_H
#define SYNTHTEST_H
#include "Synth.h"
#include "Modules.h"


class SynthTest : public Synth
{
    public:
    ModuleConstant param[8];

    SynthTest()
    {
    
        //Define Node Objects
  ModuleWavetableOsc *moduleWavetableOsc_1 = new ModuleWavetableOsc();
  ModuleLFO *moduleLFO_1 = new ModuleLFO();
  ModuleVCA *moduleVCA_1 = new ModuleVCA();
  ModuleVCA *moduleVCA_2 = new ModuleVCA();
  ModuleDelay *moduleDelay_1 = new ModuleDelay();
  ModuleLowpassFilter *moduleLowpassFilter_1 = new ModuleLowpassFilter();
  ModuleLFO *moduleLFO_2 = new ModuleLFO();

  moduleVCA_1->cv_input = new ModuleConstant(1000);
  moduleVCA_2->cv_input = new ModuleConstant(500);
  moduleDelay_1->feedback_input = new ModuleConstant(800);
  moduleDelay_1->length_input = new ModuleConstant(900);
  moduleLowpassFilter_1->resonance_input = new ModuleConstant(100);
  moduleLFO_2->wavetable_input = new ModuleConstant(400);
  moduleWavetableOsc_1->frequency_input=moduleLFO_1;
  moduleVCA_2->audio_input=moduleVCA_1;
  moduleDelay_1->audio_input=moduleVCA_2;
  moduleDelay_1->mix_input= &param[3];
  moduleVCA_1->audio_input=moduleWavetableOsc_1;
  moduleLFO_1->frequency_input= &param[0];
  moduleLFO_1->wavetable_input= &param[1];
  moduleWavetableOsc_1->wavetable_input= &param[6];
  moduleLowpassFilter_1->audio_input=moduleDelay_1;
  moduleLFO_2->frequency_input= &param[2];
  moduleLowpassFilter_1->cutoff_input=moduleLFO_2;


  this->last_module = moduleLowpassFilter_1;
        
    }
};
#endif // SYNTHTEST_H    


/* 

This is espnode86 stuff do not edit

--BEGINESPNODEPATCH--
djIuMS4xCm5ldHdvcmsvYWRkLXBhdGNoIHNhZDQgcm9vdApwYXRjaC9vcGVuIHNhZDQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBseWJ3IGVzcG5vZGUvbm9kZWxpc3QgTm9kZSUyMFBhbGxldGUKbm9kZS90dXJuLW9uIGx5YncKcGF0Y2gvYWRkLW5vZGUgc2FkNCBhZWFx
IGlucHV0L211bHRpcGxleGVyIE11bHRpcGxleGVyCm5vZGUvdHVybi1vbiBhZWFxCm5vZGUvYWRkLW91dGxldCBhZWFxIDByMXAgZXNwbm9kZS9zdHJpbmcgUG90MSBQb3QxCm5vZGUvYWRkLW91dGxldCBhZWFxIG5tY2ggZXNwbm9kZS9zdHJpbmcgUG90MiBQb3Qy
Cm5vZGUvYWRkLW91dGxldCBhZWFxIGh0anIgZXNwbm9kZS9zdHJpbmcgUG90MyBQb3QzCm5vZGUvYWRkLW91dGxldCBhZWFxIDY3Y2MgZXNwbm9kZS9zdHJpbmcgUG90NCBQb3Q0Cm5vZGUvYWRkLW91dGxldCBhZWFxIHBnNzQgZXNwbm9kZS9zdHJpbmcgUG90NSBQ
b3Q1Cm5vZGUvYWRkLW91dGxldCBhZWFxIDkzMzAgZXNwbm9kZS9zdHJpbmcgUG90NiBQb3Q2Cm5vZGUvYWRkLW91dGxldCBhZWFxIGhyencgZXNwbm9kZS9zdHJpbmcgUG90NyBQb3Q3Cm5vZGUvYWRkLW91dGxldCBhZWFxIHdsY2wgZXNwbm9kZS9zdHJpbmcgUG90
OCBQb3Q4CnBhdGNoL2FkZC1ub2RlIHNhZDQgbDBnOSB3YXZlL29zY2lsbGF0b3IgT3NjaWxsYXRvcgpub2RlL3R1cm4tb24gbDBnOQpub2RlL2FkZC1pbmxldCBsMGc5IGo0M3IgZXNwbm9kZS9zdHJpbmcgZnJlcXVlbmN5X2lucHV0IGZyZXF1ZW5jeV9pbnB1dApu
b2RlL2FkZC1pbmxldCBsMGc5IGlnd3UgZXNwbm9kZS9zdHJpbmcgd2F2ZXRhYmxlX2lucHV0IHdhdmV0YWJsZV9pbnB1dApub2RlL2FkZC1vdXRsZXQgbDBnOSBqOGttIGVzcG5vZGUvc3RyaW5nIE91dCBPdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCA1bmN3IG91dHB1
dC9kYWMgQXVkaW8lMjBEQUMKbm9kZS90dXJuLW9uIDVuY3cKbm9kZS9hZGQtaW5sZXQgNW5jdyBoa2drIGVzcG5vZGUvc3RyaW5nIGF1ZGlvX2lucHV0IGF1ZGlvX2lucHV0CnBhdGNoL2FkZC1ub2RlIHNhZDQgM2QwdyB3YXZlL2xmbyBMRiUyME9zY2lsbGF0b3IK
bm9kZS90dXJuLW9uIDNkMHcKbm9kZS9hZGQtaW5sZXQgM2QwdyB1enFmIGVzcG5vZGUvc3RyaW5nIGZyZXF1ZW5jeV9pbnB1dCBmcmVxdWVuY3lfaW5wdXQKbm9kZS9hZGQtaW5sZXQgM2QwdyB4eTdhIGVzcG5vZGUvc3RyaW5nIHdhdmV0YWJsZV9pbnB1dCB3YXZl
dGFibGVfaW5wdXQKbm9kZS9hZGQtb3V0bGV0IDNkMHcgend4NiBlc3Bub2RlL3N0cmluZyBPdXQgT3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgd3E3NyBzaWduYWwvdmNhIFZDQSUyMChWb2x0YWdlJTIwQ3RybCUyMEFtcGxpZmllcikKbm9kZS90dXJuLW9uIHdxNzcK
bm9kZS9hZGQtaW5sZXQgd3E3NyBsejR0IGVzcG5vZGUvc3RyaW5nIGF1ZGlvX2lucHV0IGF1ZGlvX2lucHV0Cm5vZGUvYWRkLWlubGV0IHdxNzcgcm1yMyBlc3Bub2RlL3N0cmluZyBjdl9pbnB1dCBjdl9pbnB1dApub2RlL2FkZC1vdXRsZXQgd3E3NyB5dXN4IGVz
cG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBsNW1iIGlucHV0L2NvbnN0YW50IENvbnN0YW50JTdDMC0xMDIzCm5vZGUvdHVybi1vbiBsNW1iCm5vZGUvYWRkLWlubGV0IGw1bWIgd2o3MiBlc3Bub2RlL3N0cmluZyB1c2VyLXZhbHVlIHVz
ZXItdmFsdWUKbm9kZS9hZGQtb3V0bGV0IGw1bWIgeDA2bSBlc3Bub2RlL3N0cmluZyBudW1iZXIgbnVtYmVyCnBhdGNoL2FkZC1ub2RlIHNhZDQgd3BkZSBpbnB1dC9jb25zdGFudCBDb25zdGFudCU3QzAtMTAyMwpub2RlL3R1cm4tb24gd3BkZQpub2RlL2FkZC1p
bmxldCB3cGRlIHMxZ3UgZXNwbm9kZS9zdHJpbmcgdXNlci12YWx1ZSB1c2VyLXZhbHVlCm5vZGUvYWRkLW91dGxldCB3cGRlIDZvZXcgZXNwbm9kZS9zdHJpbmcgbnVtYmVyIG51bWJlcgpwYXRjaC9hZGQtbm9kZSBzYWQ0IDBybmkgc2lnbmFsL3ZjYSBWQ0ElMjAo
Vm9sdGFnZSUyMEN0cmwlMjBBbXBsaWZpZXIpCm5vZGUvdHVybi1vbiAwcm5pCm5vZGUvYWRkLWlubGV0IDBybmkgZmRmdiBlc3Bub2RlL3N0cmluZyBhdWRpb19pbnB1dCBhdWRpb19pbnB1dApub2RlL2FkZC1pbmxldCAwcm5pIHI2Y2sgZXNwbm9kZS9zdHJpbmcg
Y3ZfaW5wdXQgY3ZfaW5wdXQKbm9kZS9hZGQtb3V0bGV0IDBybmkgcXY1MiBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgamplcCBmaWx0ZXIvZGVsYXkgQXVkaW8lMjBEZWxheQpub2RlL3R1cm4tb24gamplcApub2RlL2FkZC1pbmxl
dCBqamVwIDczaHAgZXNwbm9kZS9zdHJpbmcgYXVkaW9faW5wdXQgYXVkaW9faW5wdXQKbm9kZS9hZGQtaW5sZXQgamplcCBwc2N1IGVzcG5vZGUvc3RyaW5nIG1peF9pbnB1dCBtaXhfaW5wdXQKbm9kZS9hZGQtaW5sZXQgamplcCByM2FyIGVzcG5vZGUvc3RyaW5n
IGZlZWRiYWNrX2lucHV0IGZlZWRiYWNrX2lucHV0Cm5vZGUvYWRkLWlubGV0IGpqZXAgenFneCBlc3Bub2RlL3N0cmluZyBsZW5ndGhfaW5wdXQgbGVuZ3RoX2lucHV0Cm5vZGUvYWRkLW91dGxldCBqamVwIHQ4aG4gZXNwbm9kZS9zdHJpbmcgb3V0IG91dApwYXRj
aC9hZGQtbm9kZSBzYWQ0IGN1cDIgaW5wdXQvY29uc3RhbnQgQ29uc3RhbnQlN0MwLTEwMjMKbm9kZS90dXJuLW9uIGN1cDIKbm9kZS9hZGQtaW5sZXQgY3VwMiBuOWo1IGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQg
Y3VwMiB6Z3VzIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCBoMTJ3IGlucHV0L2NvbnN0YW50IENvbnN0YW50JTdDMC0xMDIzCm5vZGUvdHVybi1vbiBoMTJ3Cm5vZGUvYWRkLWlubGV0IGgxMncgdHEyYyBlc3Bub2RlL3N0
cmluZyB1c2VyLXZhbHVlIHVzZXItdmFsdWUKbm9kZS9hZGQtb3V0bGV0IGgxMncgNjhnZyBlc3Bub2RlL3N0cmluZyBudW1iZXIgbnVtYmVyCnBhdGNoL2FkZC1ub2RlIHNhZDQgZ2RreCBmaWx0ZXIvbG93cGFzcyBMb3clMjBQYXNzJTIwRmlsdGVyCm5vZGUvdHVy
bi1vbiBnZGt4Cm5vZGUvYWRkLWlubGV0IGdka3ggb2hpNyBlc3Bub2RlL3N0cmluZyBhdWRpb19pbnB1dCBhdWRpb19pbnB1dApub2RlL2FkZC1pbmxldCBnZGt4IDBsbHcgZXNwbm9kZS9zdHJpbmcgY3V0b2ZmX2lucHV0IGN1dG9mZl9pbnB1dApub2RlL2FkZC1p
bmxldCBnZGt4IGVrZHMgZXNwbm9kZS9zdHJpbmcgcmVzb25hbmNlX2lucHV0IHJlc29uYW5jZV9pbnB1dApub2RlL2FkZC1vdXRsZXQgZ2RreCB6b2wwIGVzcG5vZGUvc3RyaW5nIE91dCBPdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB1Y3RwIGlucHV0L2NvbnN0YW50
IENvbnN0YW50JTdDMC0xMDIzCm5vZGUvdHVybi1vbiB1Y3RwCm5vZGUvYWRkLWlubGV0IHVjdHAgaW4wMSBlc3Bub2RlL3N0cmluZyB1c2VyLXZhbHVlIHVzZXItdmFsdWUKbm9kZS9hZGQtb3V0bGV0IHVjdHAgNDUybSBlc3Bub2RlL3N0cmluZyBudW1iZXIgbnVt
YmVyCnBhdGNoL2FkZC1ub2RlIHNhZDQgOW8zOSB3YXZlL2xmbyBMRiUyME9zY2lsbGF0b3IKbm9kZS90dXJuLW9uIDlvMzkKbm9kZS9hZGQtaW5sZXQgOW8zOSBkaG14IGVzcG5vZGUvc3RyaW5nIGZyZXF1ZW5jeV9pbnB1dCBmcmVxdWVuY3lfaW5wdXQKbm9kZS9h
ZGQtaW5sZXQgOW8zOSAzOXJ6IGVzcG5vZGUvc3RyaW5nIHdhdmV0YWJsZV9pbnB1dCB3YXZldGFibGVfaW5wdXQKbm9kZS9hZGQtb3V0bGV0IDlvMzkgZWlyYSBlc3Bub2RlL3N0cmluZyBPdXQgT3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgZ2FjciBpbnB1dC9jb25z
dGFudCBDb25zdGFudCU3QzAtMTAyMwpub2RlL3R1cm4tb24gZ2Fjcgpub2RlL2FkZC1pbmxldCBnYWNyIGNwZW8gZXNwbm9kZS9zdHJpbmcgdXNlci12YWx1ZSB1c2VyLXZhbHVlCm5vZGUvYWRkLW91dGxldCBnYWNyIHNka24gZXNwbm9kZS9zdHJpbmcgbnVtYmVy
IG51bWJlcgpub2RlL21vdmUgbHlidyA5IDE0Cm5vZGUvbW92ZSBhZWFxIDI0OCAyMwpub2RlL21vdmUgbDBnOSA1OTAgNTgKbm9kZS9tb3ZlIDVuY3cgMTI4NCA1ODkKbm9kZS9tb3ZlIDNkMHcgMzg2IDIyCm5vZGUvbW92ZSB3cTc3IDc4OSA0NApub2RlL21vdmUg
bDVtYiA3OTYgMTM5Cm5vZGUvbW92ZSB3cGRlIDk2OCAxMzYKbm9kZS9tb3ZlIDBybmkgOTY3IDM4Cm5vZGUvbW92ZSBqamVwIDExMjEgMjIzCm5vZGUvbW92ZSBjdXAyIDk1MCAzMTAKbm9kZS9tb3ZlIGgxMncgOTUyIDQwNwpub2RlL21vdmUgZ2RreCAxMTc1IDQx
Mgpub2RlL21vdmUgdWN0cCA5NzIgNTU2Cm5vZGUvbW92ZSA5bzM5IDY2MSA0MjcKbm9kZS9tb3ZlIGdhY3IgNDM1IDQ2OQpvdXRsZXQvY29ubmVjdCB6d3g2IGo0M3IgNDFieQpvdXRsZXQvY29ubmVjdCB5dXN4IGZkZnYgZjJoeQpvdXRsZXQvY29ubmVjdCA2b2V3
IHI2Y2sgbGdibQpvdXRsZXQvY29ubmVjdCB4MDZtIHJtcjMgeHNjYQpvdXRsZXQvY29ubmVjdCBxdjUyIDczaHAganhxNwpvdXRsZXQvY29ubmVjdCA2N2NjIHBzY3UgaHN6ZwpvdXRsZXQvY29ubmVjdCB6Z3VzIHIzYXIgeGRxZgpvdXRsZXQvY29ubmVjdCA2OGdn
IHpxZ3ggbW5xegpvdXRsZXQvY29ubmVjdCBqOGttIGx6NHQgYWM5MwpvdXRsZXQvY29ubmVjdCAwcjFwIHV6cWYgbW4xegpvdXRsZXQvY29ubmVjdCBubWNoIHh5N2EgMGU1ZwpvdXRsZXQvY29ubmVjdCBocnp3IGlnd3UgajV2dApvdXRsZXQvY29ubmVjdCB0OGhu
IG9oaTcgbDZ1MApvdXRsZXQvY29ubmVjdCB6b2wwIGhrZ2sgZnZyagpvdXRsZXQvY29ubmVjdCA0NTJtIGVrZHMgeGE5YQpvdXRsZXQvY29ubmVjdCBodGpyIGRobXggcTMyNgpvdXRsZXQvY29ubmVjdCBlaXJhIDBsbHcgdXRnOApvdXRsZXQvY29ubmVjdCBzZGtu
IDM5cnogaXRhcQpub2RlL3VwZGF0ZS1pbmxldCBsMGc5IGo0M3IgZnJlcXVlbmN5X2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgM2QwdyB1enFmIGZyZXF1ZW5jeV9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IHdxNzcgbHo0dCBhdWRpb19pbnB1dCAwCm5vZGUv
dXBkYXRlLWlubGV0IHdxNzcgcm1yMyBjdl9pbnB1dCAxMDAwCm5vZGUvdXBkYXRlLW91dGxldCBsNW1iIHgwNm0gbnVtYmVyIDEwMDAKbm9kZS91cGRhdGUtaW5sZXQgbDVtYiB3ajcyIHVzZXItdmFsdWUgMTAwMApub2RlL3VwZGF0ZS1vdXRsZXQgd3BkZSA2b2V3
IG51bWJlciA1MDAKbm9kZS91cGRhdGUtaW5sZXQgd3BkZSBzMWd1IHVzZXItdmFsdWUgNTAwCm5vZGUvdXBkYXRlLWlubGV0IDBybmkgZmRmdiBhdWRpb19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDBybmkgcjZjayBjdl9pbnB1dCA1MDAKbm9kZS91cGRhdGUt
aW5sZXQgamplcCA3M2hwIGF1ZGlvX2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgamplcCBwc2N1IG1peF9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGpqZXAgcjNhciBmZWVkYmFja19pbnB1dCA4MDAKbm9kZS91cGRhdGUtaW5sZXQgamplcCB6cWd4IGxlbmd0
aF9pbnB1dCA5MDAKbm9kZS91cGRhdGUtb3V0bGV0IGN1cDIgemd1cyBudW1iZXIgODAwCm5vZGUvdXBkYXRlLWlubGV0IGN1cDIgbjlqNSB1c2VyLXZhbHVlIDgwMApub2RlL3VwZGF0ZS1vdXRsZXQgaDEydyA2OGdnIG51bWJlciA5MDAKbm9kZS91cGRhdGUtaW5s
ZXQgaDEydyB0cTJjIHVzZXItdmFsdWUgOTAwCm5vZGUvdXBkYXRlLWlubGV0IGdka3ggb2hpNyBhdWRpb19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGdka3ggZWtkcyByZXNvbmFuY2VfaW5wdXQgMTAwCm5vZGUvdXBkYXRlLW91dGxldCB1Y3RwIDQ1Mm0gbnVt
YmVyIDEwMApub2RlL3VwZGF0ZS1pbmxldCB1Y3RwIGluMDEgdXNlci12YWx1ZSAxMDAKbm9kZS91cGRhdGUtaW5sZXQgOW8zOSBkaG14IGZyZXF1ZW5jeV9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDlvMzkgMzlyeiB3YXZldGFibGVfaW5wdXQgNDAwCm5vZGUv
dXBkYXRlLW91dGxldCBnYWNyIHNka24gbnVtYmVyIDQwMApub2RlL3VwZGF0ZS1pbmxldCBnYWNyIGNwZW8gdXNlci12YWx1ZSA0MDA=
--ENDESPNODEPATCH--

*/
